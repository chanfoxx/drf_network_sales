# Generated by Django 5.0.3 on 2024-03-13 02:52

import django.utils.timezone
import users.managers
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='E-mail')),
                ('code', models.PositiveSmallIntegerField(default=912, max_length=3, verbose_name='Код телефона')),
                ('phone', models.PositiveIntegerField(blank=True, max_length=7, null=True, verbose_name='Номер телефона')),
                ('city', models.CharField(blank=True, choices=[('Санкт-Петербург и область', [('Санкт-Петербург', 'Санкт-Петербург'), ('Александровская', 'Александровская'), ('Бокситогорск', 'Бокситогорск'), ('Большая Ижора', 'Большая Ижора'), ('Будогощь', 'Будогощь'), ('Вознесенье', 'Вознесенье'), ('Волосово', 'Волосово'), ('Волхов', 'Волхов'), ('Всеволожск', 'Всеволожск'), ('Выборг', 'Выборг'), ('Вырица', 'Вырица'), ('Высоцк', 'Высоцк'), ('Гатчина', 'Гатчина'), ('Дружная Горка', 'Дружная Горка'), ('Дубровка', 'Дубровка'), ('Ефимовский', 'Ефимовский'), ('Зеленогорск', 'Зеленогорск'), ('Ивангород', 'Ивангород'), ('Каменногорск', 'Каменногорск'), ('Кикерино', 'Кикерино'), ('Кингисепп', 'Кингисепп'), ('Кириши', 'Кириши'), ('Кировск', 'Кировск'), ('Кобринское', 'Кобринское'), ('Колпино', 'Колпино'), ('Коммунар', 'Коммунар'), ('Кронштадт', 'Кронштадт'), ('Лисий Нос', 'Лисий Нос'), ('Лодейное Поле', 'Лодейное Поле'), ('Ломоносов', 'Ломоносов'), ('Луга', 'Луга'), ('Павловск', 'Павловск'), ('Парголово', 'Парголово'), ('Петродворец', 'Петродворец'), ('Пикалёво', 'Пикалёво'), ('Подпорожье', 'Подпорожье'), ('Приозерск', 'Приозерск'), ('Пушкин', 'Пушкин'), ('Сестрорецк', 'Сестрорецк'), ('Сланцы', 'Сланцы'), ('Сосновый Бор', 'Сосновый Бор'), ('Тихвин', 'Тихвин'), ('Тосно', 'Тосно'), ('Шлиссельбург', 'Шлиссельбург')])], max_length=20, null=True, verbose_name='Город')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='images/users/', verbose_name='Аватарка')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', users.managers.UserManager()),
            ],
        ),
    ]
